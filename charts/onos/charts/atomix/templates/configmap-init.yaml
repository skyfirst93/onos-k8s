apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "fullname" . }}-init-scripts
  labels:
    app: {{ template "fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
data:
  create-config.sh: |
    #!/usr/bin/env bash

    HOST=`hostname -s`
    DOMAIN=`hostname -d`
    SERVICE=${DOMAIN%%.}
    NODES=1
    HEAP=2G

    function print_usage() {
    echo "\
    Usage: create-config [OPTIONS]
    Creates an Atomix configuration from the supplied arguments.
        --nodes             The number of nodes in the cluster. The default value is 1.
    "
    }

    function print_variables() {
        echo "atomix.service=$SERVICE"
        echo "atomix.node.id=$NAME-$ORD"
        echo "atomix.node.address=$NAME-$ORD.$DOMAIN:5679"
        echo "atomix.replicas=$NODES"
        for (( i=0; i<$NODES; i++ ))
        do
            echo "atomix.members.$i=$NAME-$((i))"
            echo "atomix.nodes.$i.id=$NAME-$((i))"
            echo "atomix.nodes.$i.address=$NAME-$((i)).$DOMAIN:5679"
        done
    }

    function create_config() {
        print_variables
    }

    optspec=":hv-:"
    while getopts "$optspec" optchar; do

        case "${optchar}" in
            -)
                case "${OPTARG}" in
                    nodes=*)
                        NODES=${OPTARG##*=}
                        ;;
                    *)
                        echo "Unknown option --${OPTARG}" >&2
                        exit 1
                        ;;
                esac;;
            h)
                print_usage
                exit
                ;;
            v)
                echo "Parsing option: '-${optchar}'" >&2
                ;;
            *)
                if [ "$OPTERR" != 1 ] || [ "${optspec:0:1}" = ":" ]; then
                    echo "Non-option argument: '-${OPTARG}'" >&2
                fi
                ;;
        esac
    done

    if [[ $HOST =~ (.*)-([0-9]+)$ ]]; then
        NAME=${BASH_REMATCH[1]}
        ORD=${BASH_REMATCH[2]}
    else
        echo "Failed to parse name and ordinal of Pod"
        exit 1
        #NAME=test
        #ORD=0
    fi

    create_config