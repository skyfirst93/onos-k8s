# This template provides a StatefulSet for Atomix nodes.
# The StatefulSet is used to ensure that nodes are assigned a persistent identity.
# The StatefulSet must be used with a headless service to ensure pods can communicate with each other through
# their persistent identities.
# The StatefulSet supports upgrades through a simple RollingUpdate strategy.
# An anti-affinity policy is used to ensure pods are scheduled on distinct hosts when enabled.
# To configure the pods, an init container is used to populate a properties file on an ephemeral volume. The
# configuration volume is shared with the primary container for configuration purposes.
# Additionally, a volume claim template is used for the Raft partition logs.
# It's recommended that local-storage be used with the StatefulSet.
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "fullname" . }}
  labels:
    app: {{ template "fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
spec:
  serviceName: {{ template "fullname" . }}-hs
  selector:
    matchLabels:
      app: {{ template "fullname" . }}
  replicas: {{ .Values.replicas }}
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: Parallel
  template:
    metadata:
      labels:
        app: {{ template "fullname" . }}
    spec:
      {{- if .Values.podAntiAffinity.enabled }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - {{ template "fullname" . }}
            topologyKey: kubernetes.io/hostname
      {{- end }}
      initContainers:
      - name: configure
        image: ubuntu:16.04
        env:
        - name: ATOMIX_NODES
          value: {{ default "1" .Values.replicas | quote }}
        command:
        - sh
        - -c
        - "/scripts/create-config.sh --nodes=$ATOMIX_NODES > /config/atomix.properties"
        volumeMounts:
        - name: init-scripts
          mountPath: /scripts
        - name: system-config
          mountPath: /config
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
        - name: JAVA_OPTS
          value: -Xmx{{ default "2G" .Values.heap }}
        resources:
          requests:
            memory: {{ .Values.resources.requests.memory }}
            cpu: {{ .Values.resources.requests.cpu }}
        ports:
        - name: client
          containerPort: 5678
        - name: server
          containerPort: 5679
        args:
        - --config
        - /etc/atomix/system/atomix.properties
        - /etc/atomix/user/atomix.conf
        - --ignore-resources
        - --data-dir=/var/lib/atomix/data
        - --log-level={{ default "INFO" .Values.logLevel }}
        - --file-log-level=OFF
        - --console-log-level={{ default "INFO" .Values.logLevel }}
        readinessProbe:
          httpGet:
            path: /v1/status
            port: 5678
          initialDelaySeconds: 10
          timeoutSeconds: 10
          failureThreshold: 6
        livenessProbe:
          httpGet:
            path: /v1/status
            port: 5678
          initialDelaySeconds: 60
          timeoutSeconds: 10
        volumeMounts:
{{- if .Values.persistence.enable }}
        - name: data
          mountPath: /var/lib/atomix
{{- end }}
        - name: system-config
          mountPath: /etc/atomix/system
        - name: user-config
          mountPath: /etc/atomix/user
      {{- if .Values.image.pullSecrets }}
      imagePullSecrets:
        {{- range .Values.image.pullSecrets }}
        - name: {{ . | quote }}
        {{- end }}
      {{- end }}
      volumes:
      - name: init-scripts
        configMap:
          name: {{ template "fullname" . }}-init-scripts
          defaultMode: 0744
      - name: user-config
        configMap:
          name: {{ template "fullname" . }}-config
      - name: system-config
        emptyDir: {}
{{- if .Values.persistence.enable }}
  volumeClaimTemplates:
  - metadata:
      name: data
      annotations:
      {{- range $key, $value := .Values.persistence.annotations }}
      {{ $key }}: {{ $value }}
      {{- end }}
    spec:
      accessModes:
      {{- range .Values.persistence.accessModes }}
      - {{ . | quote }}
      {{- end }}
      {{- if .Values.persistence.storageClass }}
      {{- if (eq "-" .Values.persistence.storageClass) }}
      storageClassName: ""
      {{- else }}
      storageClassName: "{{ .Values.persistence.storageClass }}"
      {{- end }}
      {{- end }}
      resources:
        requests:
          storage: {{ .Values.persistence.size | quote }}
{{- end }}
